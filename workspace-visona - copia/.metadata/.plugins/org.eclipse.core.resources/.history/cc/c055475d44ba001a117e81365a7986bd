package cl.inacap.microserviciolibrerias.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;



@RestController
public class LibProductoController {

	@Autowired
	private ProductoService service;

	@GetMapping
	public ResponseEntity<?> listar() {
		return ResponseEntity.ok().body(service.finAll());
	}

	@GetMapping("/{id}")
	public ResponseEntity<?> ver(@PathVariable Long id) {

		Optional<Producto> b = service.findbyId(id);
		if (b.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		return ResponseEntity.ok(b.get());
	}

	@PostMapping
	public ResponseEntity<?> crear(@RequestBody Producto producto) {
		Producto productoDb = service.save(producto);
		return ResponseEntity.status(HttpStatus.CREATED).body(productoDb);
	}

	@PutMapping("/{id}")
	public ResponseEntity<?> editar(@RequestBody Producto producto, @PathVariable Long id) {

		Optional<Producto> b = service.findbyId(id);
		if (b.isEmpty()) {
			return ResponseEntity.notFound().build();
		}

		Producto productoDb = b.get();
		productoDb.setNombreProducto(producto.getNombreProducto());
		productoDb.setMedidaEstandar(producto.getMedidaEstandar());
		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(productoDb));
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<?> eliminar(@PathVariable Long id) {
		service.deleteById(id);
		return ResponseEntity.notFound().build();

	}
	
	@PutMapping("/{id}/asignar-categoria")
	public ResponseEntity<?> asignarCategoria(@RequestBody List<CategoriaProducto> categoriaProducto, @PathVariable Long id) {

		Optional<Producto> b = this.service.findbyId(id);
		if (!b.isPresent()) {
			return ResponseEntity.notFound().build();
		}

		Producto productoDb = b.get();
		
		categoriaProducto.forEach(a-> {
			productoDb.addCategoriaProducto(a);
		});
		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(productoDb));
		
	}
	
	@PutMapping("/{id}/eliminar-categoria")
	public ResponseEntity<?> eliminarCategoria(@RequestBody CategoriaProducto categoriaProducto, @PathVariable Long id) {

		Optional<Producto> b = this.service.findbyId(id);
		if (!b.isPresent()) {
			return ResponseEntity.notFound().build();
		}

		Producto productoDb = b.get();
		
		productoDb.removeCategoriaProducto(categoriaProducto);
		return ResponseEntity.status(HttpStatus.CREATED).body(service.save(productoDb));
		
	}

}
